[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git & github workshop",
    "section": "",
    "text": "Welcome to the Day1"
  },
  {
    "objectID": "index.html#before-day-1",
    "href": "index.html#before-day-1",
    "title": "Git & github workshop",
    "section": "🧰 Before Day 1",
    "text": "🧰 Before Day 1\nRead the pre-course ⬆️ and be prepared accordingly. You need following tools in the day 1:\n\n\n\n\n\n\n👉Tools\n\n\n\n\n\n\nWSL/Unix/Ubuntu/Shell The Unix Shell tutorial\nR (version ≥ 4.0)\nRStudio\nRecommended packages in RStudio: tidyverse\nPlink at Linux (https://zzz.bwh.harvard.edu/plink/dist/plink-latest.zip)"
  },
  {
    "objectID": "index.html#schedule-of-day-1",
    "href": "index.html#schedule-of-day-1",
    "title": "Git & github workshop",
    "section": "📅 Schedule of Day 1",
    "text": "📅 Schedule of Day 1\n\n\n\n\n\n\n\n\nDay 1, Time\nTopic\nInstructor\n\n\n\n\n00.00-00.30\nGit\nAbu\n\n\n00.45-1.30\nGithub\nAbu\n\n\n13.30-15.30\nLab (practical)\nAbu"
  },
  {
    "objectID": "index.html#at-day-1",
    "href": "index.html#at-day-1",
    "title": "Git & github workshop",
    "section": "🟢At Day 1",
    "text": "🟢At Day 1\nGithub, Git, Lab. See up, bar headers ⬆️"
  },
  {
    "objectID": "index.html#course-materieals",
    "href": "index.html#course-materieals",
    "title": "Git & github workshop",
    "section": "📚 Course materieals",
    "text": "📚 Course materieals\n\n\n\n\n\n\n👉️ Course materieals\n\n\n\n\n\n\n1. Download this repository:\nwget https://github.com/abu85/intro-to-linux-and-R/archive/refs/heads/main.zip . # download with 'wget' command\n\n\n2. Extract and enter into the repository folder📁\n\nunzip main.zip            # extract everything from the zip file to folder\n\nls                        # see the file folder\n\ncd intro-to-linux-and-R   # change and enter into the folder(directory)\nOr Clone this repository if are using (git):\ngit clone https://github.com/YOUR_USERNAME/intro-to-R-genomic-selection.git\ncd intro-to-linux-and-R\n\n\n📚 Contents of the 📁 intro-to-linux-and-R\nls -la         # see the content\nIt will be look like as follows\n_quarto.yml _quarto_old.yml\ndocs\nindex_files practicals.md\nslides _quarto_new.txt _site index.qmd practicals scripts\nstyles.css\n\nImportant folders for you\n\nslides/: Lecture slides\nscripts/: Lecture R scripts for each topic\nPracticals: RMarkdown files for hands-on exercises\npracticals/: Sample genotype and phenotype datasets\n\n\n\n3. Open the project in RStudio.\n\n\n4. Install required packages:\ninstall.packages(c(\"tidyverse\"??????)) \n\n\n5. After Lunch (Start with the practicals in the practicals/ folder.)\n\n\n6. Extras:\n\nresources/: Additional resources and cheat sheets\nsolutions/: Solutions to practical exercises\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n📬 For questions or feedback, contact at abu.siddique@slu.se"
  },
  {
    "objectID": "index.html#for-questions-or-feedback-contact-at-abu.siddiqueslu.se",
    "href": "index.html#for-questions-or-feedback-contact-at-abu.siddiqueslu.se",
    "title": "Git & github workshop",
    "section": "📬 For questions or feedback, contact at abu.siddique@slu.se",
    "text": "📬 For questions or feedback, contact at abu.siddique@slu.se"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Git & github workshop",
    "section": "License",
    "text": "License\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License."
  },
  {
    "objectID": "slides/slides.html",
    "href": "slides/slides.html",
    "title": "",
    "section": "",
    "text": "title: “Slides”\nSlide sources go in the slides/ folder."
  },
  {
    "objectID": "scripts/03_repo_making.html",
    "href": "scripts/03_repo_making.html",
    "title": "Practical 01 — Intro to Linux",
    "section": "",
    "text": "Learn basic shell commands\nPractice editing files\n\n# example: list files\nls -la"
  },
  {
    "objectID": "scripts/03_repo_making.html#goals",
    "href": "scripts/03_repo_making.html#goals",
    "title": "Practical 01 — Intro to Linux",
    "section": "",
    "text": "Learn basic shell commands\nPractice editing files\n\n# example: list files\nls -la"
  },
  {
    "objectID": "scripts/01_intro_to_git.html",
    "href": "scripts/01_intro_to_git.html",
    "title": "",
    "section": "",
    "text": "Setup: Installation\nIntroducing the Shell: What & Why shell? CLI vs GUI\nNavigating Files and Directories\nWorking With Files and Directories\nPipes\nShell Scripts\nFinding Things\n\n\n\n\n\nopen the terminal or wsl command line\nwhere am I (print working directory)\ncreate a directory (folder)\nchange working directory to the new directory\nabsolute/relative paths of that directory\nlist view (different styles)\narguments\ncopy and paste\nmove\nrename\ndelete files or folders\ndownload tools\nunzip or extract\n\n\n\n\nls, cd, pwd, mkdir, cp, mv, rm.\n\n\n\nls , cd, mkdir, wget (for plinks tool), tar or unzip, nano, less, head, use of \\, arguments,\n\n\n\n\nless – view a file\nnano – view and edit a file\nhead / tail\ngrep\nfind\nwildcards\ntab completion – use it!!!\nman – manual pages or\nanycommand --help\n\n\n\n\nls"
  },
  {
    "objectID": "scripts/01_intro_to_git.html#intro-to-linux-under-development",
    "href": "scripts/01_intro_to_git.html#intro-to-linux-under-development",
    "title": "",
    "section": "",
    "text": "Setup: Installation\nIntroducing the Shell: What & Why shell? CLI vs GUI\nNavigating Files and Directories\nWorking With Files and Directories\nPipes\nShell Scripts\nFinding Things\n\n\n\n\n\nopen the terminal or wsl command line\nwhere am I (print working directory)\ncreate a directory (folder)\nchange working directory to the new directory\nabsolute/relative paths of that directory\nlist view (different styles)\narguments\ncopy and paste\nmove\nrename\ndelete files or folders\ndownload tools\nunzip or extract\n\n\n\n\nls, cd, pwd, mkdir, cp, mv, rm.\n\n\n\nls , cd, mkdir, wget (for plinks tool), tar or unzip, nano, less, head, use of \\, arguments,\n\n\n\n\nless – view a file\nnano – view and edit a file\nhead / tail\ngrep\nfind\nwildcards\ntab completion – use it!!!\nman – manual pages or\nanycommand --help\n\n\n\n\nls"
  },
  {
    "objectID": "episodes/14-supplemental-rstudio.html",
    "href": "episodes/14-supplemental-rstudio.html",
    "title": "Supplemental: Using Git from RStudio",
    "section": "",
    "text": "Questions\n\n\n\n\nHow can I use Git with RStudio?\nVersion control can be very useful when developing data analysis scripts. For that reason, the popular development environment RStudio for the R programming language has built-in integration with Git. While some advanced Git features still require the command-line, RStudio has a nice interface for many common Git operations.\nRStudio allows us to create a project associated with a given directory to keep track of various related files. To be able to track the development of the project over time, to be able to revert to previous versions, and to collaborate with others, we version control the Rstudio project with Git. To get started using Git in RStudio, we create a new project:\nThis opens a dialog asking us how we want to create the project. We have some options here. Let’s say that we want to use RStudio with the recipes repository that we already made. Since that repository lives in a directory on our computer, we choose the option “Existing Directory”:\nNext, RStudio will ask which existing directory we want to use. Click “Browse…” and navigate to the correct directory, then click “Create Project”:\nTa-da! We have created a new project in RStudio within the existing recipes repository. Notice the vertical “Git” menu in the menu bar. RStudio has recognized that the current directory is a Git repository, and gives us a number of tools to use Git:\nTo edit the existing files in the repository, we can click on them in the “Files” panel on the lower right. Now let’s add some additional information about Hummus:\nOnce we have saved our edited files, we can use RStudio to commit the changes by clicking on “Commit…” in the Git menu:\nThis will open a dialogue where we can select which files to commit (by checking the appropriate boxes in the “Staged” column), and enter a commit message (in the upper right panel). The icons in the “Status” column indicate the current status of each file. Clicking on a file shows information about changes in the lower panel (using output of git diff). Once everything is the way we want it, we click “Commit”:\nThe changes can be pushed by selecting “Push Branch” from the Git menu. There are also options to pull from the remote repository, and to view the commit history:\nIf we click on “History”, we can see a graphical version of what git log would tell us:\nNow that you’ve confirmed your commit history locally using the Git pane in RStudio, you can head over to GitHub to see the same history reflected in your repository online.\nTo view it, go to your repository page and click on the “Commits” link near the top.\nThis will open a list of all commits, showing who made each change and when.\nAfter seeing how your commit history appears on GitHub, you can be confident that your changes have been successfully pushed and recorded.\nNext, let’s take a look at how RStudio quietly helps manage your repository by automatically updating the .gitignore file.\nWhen you create a New Project in RStudio, it generates an *.Rproj file and a hidden folder called .Rproj.user. These are used to store project-specific settings and user preferences.\nRStudio recognizes that these files typically shouldn’t be tracked in version control, so it automatically adds .Rproj.user to your existing .gitignore file.\nNotice that the .gitignore file was modified and appears as a changed file in the Git tab on the right-hand side panel.\nThere are many more features in the RStudio Git menu, but these should be enough to get you started!"
  },
  {
    "objectID": "episodes/14-supplemental-rstudio.html#push-the-.gitignore-changes-to-github",
    "href": "episodes/14-supplemental-rstudio.html#push-the-.gitignore-changes-to-github",
    "title": "Supplemental: Using Git from RStudio",
    "section": "Push the .gitignore changes to GitHub",
    "text": "Push the .gitignore changes to GitHub\nConsider adding other files to be ignored, such as recipes.Rproj, .Rhistory and .RData, and complete the process for saving RStudio’s .gitignore file changes to your remote repository."
  },
  {
    "objectID": "episodes/12-citation.html",
    "href": "episodes/12-citation.html",
    "title": "Citation",
    "section": "",
    "text": "Questions\n\n\n\n\nHow can I make my work easier to cite?\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\nMake your work easy to cite\n\n\n\nYou may want to include a file called CITATION or CITATION.txt that describes how to reference your project; the one for Software Carpentry states:\nTo reference Software Carpentry in publications, please cite:\n\nGreg Wilson: \"Software Carpentry: Lessons Learned\". F1000Research,\n2016, 3:62 (doi: 10.12688/f1000research.3-62.v2).\n\n@online{wilson-software-carpentry-2016,\n  author      = {Greg Wilson},\n  title       = {Software Carpentry: Lessons Learned},\n  version     = {2},\n  date        = {2016-01-28},\n  url         = {http://f1000research.com/articles/3-62/v2},\n  doi         = {10.12688/f1000research.3-62.v2}\n}\nMore detailed advice, and other ways to make your code citable can be found at the Software Sustainability Institute blog and in:\nSmith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. (2016) Software citation\nprinciples. [PeerJ Computer Science 2:e86](https://peerj.com/articles/cs-86/)\nhttps://doi.org/10.7717/peerj-cs.8\nThere is also an @software{... BibTeX entry type in case no “umbrella” citation like a paper or book exists for the project you want to make citable.\nFinally, you may wish to include citation information in a Citation File Format (CITATION.cff). CFF files are standardized human and machine readable citation information files for software and datasets. If you host your repository on GitHub, this information is automatically linked and rendered on the repository page and a BibTeX snippet is provided, which users can copy and paste, making it easy for your project to be cited. Further, integration with both Zenodo and Zotero is supported.\nA chapter of The Turing Way provides more detail on how you can use CFF files to make your software citable.\nYou can use the cff-init website to easily create and update a CITATION.cff file.\n\n\nAdd a CITATION file to a repository to explain how you want your work cited.\n\n\n\n\n\nReuseCC-BY 4.0"
  },
  {
    "objectID": "episodes/10-open.html",
    "href": "episodes/10-open.html",
    "title": "Open Science",
    "section": "",
    "text": "Questions\n\n\n\n\nHow can version control help me make my work more open?\nFree sharing of information might be the ideal in science, but the reality is often more complicated. Normal practice today looks something like this:\nFor a growing number of scientists, though, the process looks like this:\nThis open model accelerates discovery: the more open work is, the more widely it is cited and re-used. However, people who want to work this way need to make some decisions about what exactly “open” means and how to do it. You can find more on the different aspects of Open Science in this book.\nThis is one of the (many) reasons we teach version control. When used diligently, it answers the “how” question by acting as a shareable electronic lab notebook for computational work:"
  },
  {
    "objectID": "episodes/10-open.html#how-reproducible-is-my-work",
    "href": "episodes/10-open.html#how-reproducible-is-my-work",
    "title": "Open Science",
    "section": "How Reproducible Is My Work?",
    "text": "How Reproducible Is My Work?\nAsk one of your labmates to reproduce a result you recently obtained using only what they can find in your papers or on the web. Try to do the same for one of their results, then try to do it for a result from a lab you work with."
  },
  {
    "objectID": "episodes/10-open.html#how-to-find-an-appropriate-data-repository",
    "href": "episodes/10-open.html#how-to-find-an-appropriate-data-repository",
    "title": "Open Science",
    "section": "How to Find an Appropriate Data Repository?",
    "text": "How to Find an Appropriate Data Repository?\nSurf the internet for a couple of minutes and check out the generalist data repositories mentioned above: Figshare, Zenodo, Dryad. Try to also find one or more repositories for data in your field. You might also find useful these data repositories recommended by Nature. Discuss with your neighbor which data repository you might want to approach for your current project and explain why.\n\nUseful Resource\nConfused by the sheer number of different repositories you could choose for your data? This repository selection flowchart aims to “guide users through a series of considerations for selecting the right repository for sharing data.”"
  },
  {
    "objectID": "episodes/10-open.html#how-to-track-large-data-or-image-files-using-git",
    "href": "episodes/10-open.html#how-to-track-large-data-or-image-files-using-git",
    "title": "Open Science",
    "section": "How to Track Large Data or Image Files using Git?",
    "text": "How to Track Large Data or Image Files using Git?\nLarge data or image files such as .md5 or .psd file types can be tracked within a github repository using the Git Large File Storage open source extension tool. This tool automatically uploads large file contents to a remote server and replaces the file with a text pointer within the github repository.\nTry downloading and installing the Git Large File Storage extension tool, then add tracking of a large file to your github repository. Ask a colleague to clone your repository and describe what they see when they access that large file."
  },
  {
    "objectID": "episodes/08-collab.html",
    "href": "episodes/08-collab.html",
    "title": "Collaborating",
    "section": "",
    "text": "Questions\n\n\n\n\nHow can I use version control to collaborate with other people?\nFor the next step, get into pairs. One person will be the “Owner” and the other will be the “Collaborator”. The goal is that the Collaborator add changes into the Owner’s repository. We will switch roles at the end, so both persons will play Owner and Collaborator.\nThe Owner needs to give the Collaborator access. In your repository page on GitHub, click the “Settings” button on the right, select “Collaborators”, click “Add people”, and then enter your partner’s username.\nTo accept access to the Owner’s repo, the Collaborator needs to go to https://github.com/notifications or check for email notification. Once there she can accept access to the Owner’s repo.\nNext, the Collaborator needs to download a copy of the Owner’s repository to her machine. This is called “cloning a repo”.\nThe Collaborator doesn’t want to overwrite her own version of recipes.git, so needs to clone the Owner’s repository to a different location than her own repository with the same name.\nTo clone the Owner’s repo into her Desktop folder, the Collaborator enters:\nReplace ‘alflin’ with the Owner’s username.\nIf you choose to clone without the clone path (~/Desktop/alflin-recipes) specified at the end, you will clone inside your own recipes folder! Make sure to navigate to the Desktop folder first.\nThe Collaborator can now make a change in her clone of the Owner’s repository, exactly the same way as we’ve been doing before:\nThen push the change to the Owner’s repository on GitHub:\nNote that we didn’t have to create a remote called origin: Git uses this name by default when we clone a repository. (This is why origin was a sensible choice earlier when we were setting up remotes by hand.)\nTake a look at the Owner’s repository on GitHub again, and you should be able to see the new commit made by the Collaborator. You may need to refresh your browser to see the new commit.\nTo download the Collaborator’s changes from GitHub, the Owner now enters:\nNow the three repositories (Owner’s local, Collaborator’s local, and Owner’s on GitHub) are back in sync."
  },
  {
    "objectID": "episodes/08-collab.html#switch-roles-and-repeat",
    "href": "episodes/08-collab.html#switch-roles-and-repeat",
    "title": "Collaborating",
    "section": "Switch Roles and Repeat",
    "text": "Switch Roles and Repeat\nSwitch roles and repeat the whole process."
  },
  {
    "objectID": "episodes/08-collab.html#review-changes",
    "href": "episodes/08-collab.html#review-changes",
    "title": "Collaborating",
    "section": "Review Changes",
    "text": "Review Changes\nThe Owner pushed commits to the repository without giving any information to the Collaborator. How can the Collaborator find out what has changed with command line? And on GitHub?\n\nSolution (Solution). On the command line, the Collaborator can use git fetch origin main to get the remote changes into the local repository, but without merging them. Then by running git diff main origin/main the Collaborator will see the changes output in the terminal.\nOn GitHub, the Collaborator can go to the repository and click on “commits” to view the most recent commits pushed to the repository."
  },
  {
    "objectID": "episodes/08-collab.html#comment-changes-in-github",
    "href": "episodes/08-collab.html#comment-changes-in-github",
    "title": "Collaborating",
    "section": "Comment Changes in GitHub",
    "text": "Comment Changes in GitHub\nThe Collaborator has some questions about one line change made by the Owner and has some suggestions to propose.\nWith GitHub, it is possible to comment on the diff of a commit. Over the line of code to comment, a blue comment icon appears to open a comment window.\nThe Collaborator posts her comments and suggestions using the GitHub interface."
  },
  {
    "objectID": "episodes/08-collab.html#version-history-backup-and-version-control",
    "href": "episodes/08-collab.html#version-history-backup-and-version-control",
    "title": "Collaborating",
    "section": "Version History, Backup, and Version Control",
    "text": "Version History, Backup, and Version Control\nSome backup software can keep a history of the versions of your files. They also allows you to recover specific versions. How is this functionality different from version control? What are some of the benefits of using version control, Git and GitHub?"
  },
  {
    "objectID": "episodes/06-ignore.html",
    "href": "episodes/06-ignore.html",
    "title": "Ignoring Things",
    "section": "",
    "text": "Questions\n\n\n\n\nHow can I tell Git to ignore files I don’t want to track?\nWhat if we have files that we do not want Git to track for us, like backup files created by our editor or intermediate files created during data analysis? Let’s create a few dummy files:\nand see what Git says:\nPutting these files under version control would be a waste of disk space. What’s worse, having them all listed could distract us from changes that actually matter, so let’s tell Git to ignore them.\nWe do this by creating a file in the root directory of our project called .gitignore:\nType the text below into the .gitignore file:\nSave the file and exit your editor.\nVerify that the file contains the files to ignore.\nThese patterns tell Git to ignore any file whose name ends in .png and everything in the pictures directory. (If any of these files were already being tracked, Git would continue to track them.)\nOnce we have created this file, the output of git status is much cleaner:\nThe only thing Git notices now is the newly-created .gitignore file. You might think we wouldn’t want to track it, but everyone we’re sharing our repository with will probably want to ignore the same things that we’re ignoring. Let’s add and commit .gitignore:\nAs a bonus, using .gitignore helps us avoid accidentally adding files to the repository that we don’t want to track:\nIf we really want to override our ignore settings, we can use git add -f to force Git to add something. For example, git add -f a.csv. We can also always see the status of ignored files if we want:"
  },
  {
    "objectID": "episodes/06-ignore.html#ignoring-nested-files",
    "href": "episodes/06-ignore.html#ignoring-nested-files",
    "title": "Ignoring Things",
    "section": "Ignoring Nested Files",
    "text": "Ignoring Nested Files\nGiven a directory structure that looks like:\npictures/cake\npictures/pizza\nHow would you ignore only pictures/cake and not pictures/pizza?\n\nSolution (Solution). If you only want to ignore the contents of pictures/cake, you can change your .gitignore to ignore only the /cake/ subfolder by adding the following line to your .gitignore:\npictures/cake/\nThis line will ensure only the contents of pictures/cake is ignored, and not the contents of pictures/pizza.\nAs with most programming issues, there are a few alternative ways that one may ensure this ignore rule is followed. The “Ignoring Nested Files: Variation” exercise has a slightly different directory structure that presents an alternative solution. Further, the discussion page has more detail on ignore rules."
  },
  {
    "objectID": "episodes/06-ignore.html#including-specific-files",
    "href": "episodes/06-ignore.html#including-specific-files",
    "title": "Ignoring Things",
    "section": "Including Specific Files",
    "text": "Including Specific Files\nHow would you ignore all .png files in your root directory except for final.png? Hint: Find out what ! (the exclamation point operator) does\n\nSolution (Solution). You would add the following two lines to your .gitignore:\n*.png           # ignore all png files\n!final.png      # except final.png\nThe exclamation point operator will include a previously excluded entry.\nNote also that, if you’ve previously committed .png files in this lesson, they will not be ignored with this new rule. Only future additions of .png files to the root directory will be ignored."
  },
  {
    "objectID": "episodes/06-ignore.html#ignoring-nested-files-variation",
    "href": "episodes/06-ignore.html#ignoring-nested-files-variation",
    "title": "Ignoring Things",
    "section": "Ignoring Nested Files: Variation",
    "text": "Ignoring Nested Files: Variation\nGiven a directory structure that looks similar to the earlier Nested Files exercise, but with a slightly different directory structure:\npictures/cake\npictures/pizza\npictures/pie\npictures/brownie\nHow would you ignore all of the contents in the pictures folder, but not pictures/pie?\nHint: think a bit about how you created an exception with the ! operator before.\n\nSolution (Solution). If you want to ignore the contents of pictures/ but not those of pictures/pie/, you can change your .gitignore to ignore the contents of pictures folder, but create an exception for the contents of the pictures/pie subfolder. Your .gitignore would look like this:\npictures/*              # ignore everything in pictures folder\n!pictures/pie/          # do not ignore pictures/data/ contents"
  },
  {
    "objectID": "episodes/06-ignore.html#ignoring-all-data-files-in-a-directory",
    "href": "episodes/06-ignore.html#ignoring-all-data-files-in-a-directory",
    "title": "Ignoring Things",
    "section": "Ignoring all data Files in a Directory",
    "text": "Ignoring all data Files in a Directory\nAssuming you have an empty .gitignore file, and given a directory structure that looks like:\npictures/data/location/gps/a.dat\npictures/data/location/gps/b.dat\npictures/data/location/gps/c.dat\npictures/data/location/gps/info.txt\npictures/plots\nWhat’s the shortest .gitignore rule you could write to ignore all .dat files in pictures/data/location/gps? Do not ignore the info.txt.\n\nSolution (Solution). Appending pictures/data/location/gps/*.dat will match every file in pictures/data/location/gps that ends with .dat. The file pictures/data/location/gps/info.txt will not be ignored."
  },
  {
    "objectID": "episodes/06-ignore.html#ignoring-all-data-files-in-the-repository",
    "href": "episodes/06-ignore.html#ignoring-all-data-files-in-the-repository",
    "title": "Ignoring Things",
    "section": "Ignoring all data Files in the repository",
    "text": "Ignoring all data Files in the repository\nLet us assume you have many .csv files in different subdirectories of your repository. For example, you might have:\nresults/a.csv\ndata/experiment_1/b.csv\ndata/experiment_2/c.csv\ndata/experiment_2/variation_1/d.csv\nHow do you ignore all the .csv files, without explicitly listing the names of the corresponding folders?\n\nSolution (Solution). In the .gitignore file, write:\n**/*.csv\nThis will ignore all the .csv files, regardless of their position in the directory tree. You can still include some specific exception with the exclamation point operator."
  },
  {
    "objectID": "episodes/06-ignore.html#the-order-of-rules",
    "href": "episodes/06-ignore.html#the-order-of-rules",
    "title": "Ignoring Things",
    "section": "The Order of Rules",
    "text": "The Order of Rules\nGiven a .gitignore file with the following contents:\n*.csv\n!*.csv\nWhat will be the result?\n\nSolution (Solution). The ! modifier will negate an entry from a previously defined ignore pattern. Because the !*.csv entry negates all of the previous .csv files in the .gitignore, none of them will be ignored, and all .csv files will be tracked."
  },
  {
    "objectID": "episodes/06-ignore.html#log-files",
    "href": "episodes/06-ignore.html#log-files",
    "title": "Ignoring Things",
    "section": "Log Files",
    "text": "Log Files\nYou wrote a script that creates many intermediate log-files of the form log_01, log_02, log_03, etc. You want to keep them but you do not want to track them through git.\n\nWrite one .gitignore entry that excludes files of the form log_01, log_02, etc.\nTest your “ignore pattern” by creating some dummy files of the form log_01, etc.\nYou find that the file log_01 is very important after all, add it to the tracked files without changing the .gitignore again.\nDiscuss with your neighbor what other types of files could reside in your directory that you do not want to track and thus would exclude via .gitignore.\n\n\nSolution (Solution). \n\nappend either log_* or log* as a new entry in your .gitignore\ntrack log_01 using git add -f log_01"
  },
  {
    "objectID": "episodes/04-changes.html",
    "href": "episodes/04-changes.html",
    "title": "Tracking Changes",
    "section": "",
    "text": "Questions\n\n\n\n\nHow do I record changes in Git?\nHow do I check the status of my version control repository?\nHow do I record notes about what changes I made and why?\nFirst let’s make sure we’re still in the right directory. You should be in the recipes directory.\nLet’s create a file called guacamole.md that contains the basic structure of our first recipe. We’ll use nano to edit the file; you can use whatever editor you like. In particular, this does not have to be the core.editor you set globally earlier. But remember, the steps to create or edit a new file will depend on the editor you choose (it might not be nano). For a refresher on text editors, check out “Which Editor?” in The Unix Shell lesson.\nType the text below into the guacamole.md file:\nSave the file and exit your editor.\nLet’s verify that the file was properly created by running the list command (ls):\nguacamole.md contains three lines, which we can see by running:\nIf we check the status of our project again, Git tells us that it’s noticed the new file:\nThe “untracked files” message means that there’s a file in the directory that Git isn’t keeping track of. We can tell Git to track a file using git add:\nand then check that the right thing happened:\nGit now knows that it’s supposed to keep track of guacamole.md, but it hasn’t recorded these changes as a commit yet. To get it to do that, we need to run one more command:\nWhen we run git commit, Git takes everything we have told it to save by using git add and stores a copy permanently inside the special .git directory. This permanent copy is called a commit (or revision) and its short identifier is f22b25e. Your commit may have another identifier.\nWe use the -m flag (for “message”) to record a short, descriptive, and specific comment that will help us remember later on what we did and why. If we just run git commit without the -m option, Git will launch nano (or whatever other editor we configured as core.editor) so that we can write a longer message.\nGood commit messages start with a brief (&lt;50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence “If applied, this commit will” . If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.\nIf we run git status now:\nit tells us everything is up to date. If we want to know what we’ve done recently, we can ask Git to show us the project’s history using git log:\ngit log lists all commits made to a repository in reverse chronological order. The listing for each commit includes the commit’s full identifier (which starts with the same characters as the short identifier printed by the git commit command earlier), the commit’s author, when it was created, and the log message Git was given when the commit was created.\nNow suppose Alfredo adds more information to the file. (Again, we’ll edit with nano and then cat the file to show its contents; you may use a different editor, and don’t need to cat.)\nWhen we run git status now, it tells us that a file it already knows about has been modified:\nThe last line is the key phrase: “no changes added to commit”. We have changed this file, but we haven’t told Git we will want to save those changes (which we do with git add) nor have we saved them (which we do with git commit). So let’s do that now. It is good practice to always review our changes before saving them. We do this using git diff. This shows us the differences between the current state of the file and the most recently saved version:\nThe output is cryptic because it is actually a series of commands for tools like editors and patch telling them how to reconstruct one file given the other. If we break it down into pieces:\nAfter reviewing our change, it’s time to commit it:\nWhoops: Git won’t commit because we didn’t use git add first. Let’s fix that:\nGit insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches. For example, suppose we’re adding a few citations to relevant research to our thesis. We might want to commit those additions, and the corresponding bibliography entries, but not commit some of our work drafting the conclusion (which we haven’t finished yet).\nTo allow for this, Git has a special staging area where it keeps track of things that have been added to the current changeset but not yet committed.\nLet’s watch as our changes to a file move from our editor to the staging area and into long-term storage. First, we’ll improve our recipe by changing ‘lemon’ to ‘lime’:\nSo far, so good: we’ve replaced one line (shown with a - in the first column) with a new line (shown with a + in the first column). Now let’s put that change in the staging area and see what git diff reports:\nThere is no output: as far as Git can tell, there’s no difference between what it’s been asked to save permanently and what’s currently in the directory. However, if we do this:\nit shows us the difference between the last committed change and what’s in the staging area. Let’s save our changes:\ncheck our status:\nand look at the history of what we’ve done so far:\nTo recap, when we want to add changes to our repository, we first need to add the changed files to the staging area (git add) and then commit the staged changes to the repository (git commit):"
  },
  {
    "objectID": "episodes/04-changes.html#markdown",
    "href": "episodes/04-changes.html#markdown",
    "title": "Tracking Changes",
    "section": "Markdown",
    "text": "Markdown\nJimmy and Alfredo are using Markdown to write their recipes. It is a simple plain-text format for writing lists, links and other things that might go into a web page.\n\n\n\n\n\n\n\nMarkdown code\nRendered output\n\n\n\n\n\n\n\n\n*   Use asterisks\n*   to create\n*   bullet lists.\n\n\n\nUse asterisks\nto create\nbullet lists.\n\n\n\n\n\n\n\n1.   Use numbers\n1.   to create\n1.   bullet lists.\n\n\n\nUse numbers\nto create\nnumbered lists.\n\n\n\n\n\n\n\n*  You can use indents\n  *  To create sublists\n  *  of the same type\n*  Or sublists\n  1. Of different\n  1. types\n\n\n\nYou can use indents\n\nTo create sublists\nof the same type\n\nOr sublists\n\nOf different\ntypes\n\n\n\n\n\n\n\n\n# A Level-1 Heading\n\n\nA Level-1 Heading\n\n\n\n\n\n\n## A Level-2 Heading (etc.)\n\n\nA Level-2 Heading (etc.)"
  },
  {
    "objectID": "episodes/04-changes.html#choosing-a-commit-message",
    "href": "episodes/04-changes.html#choosing-a-commit-message",
    "title": "Tracking Changes",
    "section": "Choosing a Commit Message",
    "text": "Choosing a Commit Message\nWhich of the following commit messages would be most appropriate for the last commit made to guacamole.md?\n\n“Changes”\n“Change lemon for lime”\n“Modify guacamole to the traditional recipe”\n\n\nSolution (Solution). Answer 1 is not descriptive enough, and the purpose of the commit is unclear; and answer 2 is redundant to using “git diff” to see what changed in this commit; but answer 3 is good: short, descriptive, and imperative."
  },
  {
    "objectID": "episodes/04-changes.html#committing-changes-to-git",
    "href": "episodes/04-changes.html#committing-changes-to-git",
    "title": "Tracking Changes",
    "section": "Committing Changes to Git",
    "text": "Committing Changes to Git\nWhich command(s) below would save the changes of myfile.txt to my local Git repository?\n\n   git commit -m \"my recent changes\"\n   git init myfile.txt\n   git commit -m \"my recent changes\"\n   git add myfile.txt\n   git commit -m \"my recent changes\"\n   git commit -m myfile.txt \"my recent changes\"\n\n\nSolution (Solution). \n\nWould only create a commit if files have already been staged.\nWould try to create a new repository.\nIs correct: first add the file to the staging area, then commit.\nWould try to commit a file “my recent changes” with the message myfile.txt."
  },
  {
    "objectID": "episodes/04-changes.html#committing-multiple-files",
    "href": "episodes/04-changes.html#committing-multiple-files",
    "title": "Tracking Changes",
    "section": "Committing Multiple Files",
    "text": "Committing Multiple Files\nThe staging area can hold changes from any number of files that you want to commit as a single snapshot.\n\nAdd some text to guacamole.md noting the rough price of the ingredients.\nCreate a new file groceries.md with a list of products and their prices for different markets.\nAdd changes from both files to the staging area, and commit those changes.\n\n\nSolution (Solution). First we make our changes to the guacamole.md and groceries.md files:\nnano guacamole.md\ncat guacamole.md\n# Guacamole\n## Ingredients\n* avocado (1.35)\n* lime (0.64)\n* salt (2)\nnano groceries.md\ncat groceries.md\n# Market A\n* avocado: 1.35 per unit.\n* lime: 0.64 per unit\n* salt: 2 per kg\nNow you can add both files to the staging area. We can do that in one line:\ngit add guacamole.md groceries.md\nOr with multiple commands:\ngit add guacamole.md\ngit add groceries.md\nNow the files are ready to commit. You can check that using git status. If you are ready to commit use:\ngit commit -m \"Write prices for ingredients and their source\"\n[main cc127c2]\n Write prices for ingredients and their source\n 2 files changed, 7 insertions(+)\n create mode 100644 groceries.md"
  },
  {
    "objectID": "episodes/04-changes.html#bio-repository",
    "href": "episodes/04-changes.html#bio-repository",
    "title": "Tracking Changes",
    "section": "bio Repository",
    "text": "bio Repository\n\nCreate a new Git repository on your computer called bio.\nWrite a three-line biography for yourself in a file called me.txt, commit your changes\nModify one line, add a fourth line\nDisplay the differences between its updated state and its original state.\n\n\nSolution (Solution). If needed, move out of the recipes folder:\ncd ..\nCreate a new folder called bio and ‘move’ into it:\nmkdir bio\ncd bio\nInitialise git:\ngit init\nCreate your biography file me.txt using nano or another text editor. Once in place, add and commit it to the repository:\ngit add me.txt\ngit commit -m \"Add biography file\"\nModify the file as described (modify one line, add a fourth line). To display the differences between its updated state and its original state, use git diff:\ngit diff me.txt"
  },
  {
    "objectID": "episodes/02-setup.html",
    "href": "episodes/02-setup.html",
    "title": "Setting Up Git",
    "section": "",
    "text": "Questions\n\n\n\n\nHow do I get set up to use Git?\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\nConfigure git the first time it is used on a computer.\nUnderstand the meaning of the --global configuration flag.\n\n\n\nWhen we use Git on a new computer for the first time, we need to configure a few things. Below are a few examples of configurations we will set as we get started with Git:\n\nour name and email address,\nwhat our preferred text editor is,\nand that we want to use these settings globally (i.e. for every project).\n\nOn a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb. So here is how Alfredo sets up his new laptop:\ngit config --global user.name \"Alfredo Linguini\"\ngit config --global user.email \"a.linguini@ratatouille.fr\"\nPlease use your own name and email address instead of Alfredo’s. This user name and email will be associated with your subsequent Git activity, which means that any changes pushed to GitHub, BitBucket, GitLab or another Git host server after this lesson will include this information.\nFor this lesson, we will be interacting with GitHub and so the email address used should be the same as the one used when setting up your GitHub account. If you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n\n\n\n\n\n\nKeeping your email private\n\n\n\nIf you elect to use a private email address with GitHub, then use GitHub’s no-reply email address for the user.email value. It looks like ID+username@users.noreply.github.com. You can look up your own address in your GitHub email settings.\n\n\n\n\n\n\n\n\nLine Endings\n\n\n\nAs with other keys, when you press Enter or ↵ or on Macs, Return on your keyboard, your computer encodes this input as a character. Different operating systems use different character(s) to represent the end of a line. (You may also hear these referred to as newlines or line breaks.) Because Git uses these characters to compare files, it may cause unexpected issues when editing a file on different machines. Though it is beyond the scope of this lesson, you can read more about this issue in the Pro Git book.\nYou can change the way Git recognizes and encodes line endings using the core.autocrlf command to git config. The following settings are recommended:\nOn macOS and Linux:\ngit config --global core.autocrlf input\nAnd on Windows:\ngit config --global core.autocrlf true\n\n\nAlfredo also has to set his favorite text editor, following this table:\n\n\n\n\n\n\n\nEditor\nConfiguration command\n\n\n\n\nAtom\ngit config --global core.editor \"atom --wait\"\n\n\nnano\ngit config --global core.editor \"nano -w\"\n\n\nBBEdit (Mac, with command line tools)\ngit config --global core.editor \"bbedit -w\"\n\n\nSublime Text (Mac)\ngit config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"\n\n\nSublime Text (Win, 32-bit install)\ngit config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"\n\n\nSublime Text (Win, 64-bit install)\ngit config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n\n\nNotepad (Win)\ngit config --global core.editor \"c:/Windows/System32/notepad.exe\"\n\n\nNotepad++ (Win, 32-bit install)\ngit config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\nNotepad++ (Win, 64-bit install)\ngit config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\nKate (Linux)\ngit config --global core.editor \"kate\"\n\n\nGedit (Linux)\ngit config --global core.editor \"gedit --wait --new-window\"\n\n\nScratch (Linux)\ngit config --global core.editor \"scratch-text-editor\"\n\n\nEmacs\ngit config --global core.editor \"emacs\"\n\n\nVim\ngit config --global core.editor \"vim\"\n\n\nVS Code\ngit config --global core.editor \"code --wait\"\n\n\n\nIt is possible to reconfigure the text editor for Git whenever you want to change it.\n\n\n\n\n\n\nExiting Vim\n\n\n\nNote that Vim is the default editor for many programs. If you haven’t used Vim before and wish to exit a session without saving your changes, press Esc then type :q! and press Enter or ↵ or on Macs, Return. If you want to save your changes and quit, press Esc then type :wq and press Enter or ↵ or on Macs, Return.\n\n\nGit (2.28+) allows configuration of the name of the branch created when you initialize any new repository. Alfredo decides to use that feature to set it to main so it matches the cloud service he will eventually use.\ngit config --global init.defaultBranch main\n\n\n\n\n\n\nDefault Git branch naming\n\n\n\nSource file changes are associated with a “branch.” For new learners in this lesson, it’s enough to know that branches exist, and this lesson uses one branch.\nBy default, Git will create a branch called master when you create a new repository with git init (as explained in the next Episode). This term evokes the racist practice of human slavery and the software development community has moved to adopt more inclusive language.\nIn 2020, most Git code hosting services transitioned to using main as the default branch. As an example, any new repository that is opened in GitHub and GitLab default to main. However, Git has not yet made the same change. As a result, local repositories must be manually configured have the same main branch name as most cloud services.\nFor versions of Git prior to 2.28, the change can be made on an individual repository level. The command for this is in the next episode. Note that if this value is unset in your local Git configuration, the init.defaultBranch value defaults to master.\n\n\nThe five commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer.\nLet’s review those settings and test our core.editor right away:\ngit config --global --edit\nLet’s close the file without making any additional changes. Remember, since typos in the config file will cause issues, it’s safer to view the configuration with:\ngit config --list --global\nAnd if necessary, change your configuration using the same commands to choose another editor or update your email address. This can be done as many times as you want.\n\n\n\n\n\n\nProxy\n\n\n\nIn some networks you need to use a proxy. If this is the case, you may also need to tell Git about the proxy:\ngit config --global http.proxy proxy-url\ngit config --global https.proxy proxy-url\nTo disable the proxy, use\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n\n\n\n\n\n\n\nGit Help and Manual\n\n\n\nAlways remember that if you forget the subcommands or options of a git command, you can access the relevant list of options typing git &lt;command&gt; -h or access the corresponding Git manual by typing git &lt;command&gt; --help, e.g.:\ngit config -h\ngit config --help\nWhile viewing the manual, remember the : is a prompt waiting for commands and you can press Q to exit the manual.\nMore generally, you can get the list of available git commands and further resources of the Git manual typing:\ngit help\n\n\n\n\nUse git config with the --global option to configure a user name, email address, editor, and other preferences once per machine.\n\n\n\n\n\nReuseCC-BY 4.0"
  },
  {
    "objectID": "episodes/01-basics.html",
    "href": "episodes/01-basics.html",
    "title": "Automated Version Control",
    "section": "",
    "text": "Questions\n\n\n\n\nWhat is version control and why should I use it?\nWe’ll start by exploring how version control can be used to keep track of what one person did and when. Even if you aren’t collaborating with other people, automated version control is much better than this situation:\nWe’ve all been in this situation before: it seems unnecessary to have multiple nearly-identical versions of the same document. Some word processors let us deal with this a little better, such as Microsoft Word’s Track Changes, Google Docs’ version history, or LibreOffice’s Recording and Displaying Changes.\nVersion control systems start with a base version of the document and then record changes you make each step of the way. You can think of it as a recording of your progress: you can rewind to start at the base document and play back each change you made, eventually arriving at your more recent version.\nOnce you think of changes as separate from the document itself, you can then think about “playing back” different sets of changes on the base document, ultimately resulting in different versions of that document. For example, two users can make independent sets of changes on the same document.\nUnless multiple users make changes to the same section of the document - a conflict - you can incorporate two sets of changes into the same base document.\nA version control system is a tool that keeps track of these changes for us, effectively creating different versions of our files. It allows us to decide which changes will be made to the next version (each record of these changes is called a commit), and keeps useful metadata about them, such as who made the change. The complete history of commits for a particular project and their metadata make up a repository. Repositories can be kept in sync across different computers, facilitating collaboration among different people."
  },
  {
    "objectID": "episodes/01-basics.html#paper-writing",
    "href": "episodes/01-basics.html#paper-writing",
    "title": "Automated Version Control",
    "section": "Paper Writing",
    "text": "Paper Writing\n\nImagine you drafted an excellent paragraph for a paper you are writing, but later ruin it. How would you retrieve the excellent version of your conclusion? Is it even possible?\nImagine you have 5 co-authors. How would you manage the changes and comments they make to your paper? If you use LibreOffice Writer or Microsoft Word, what happens if you accept changes made using the Track Changes option? Do you have a history of those changes?\n\n\nSolution (Solution). \n\nRecovering the excellent version is only possible if you created a copy of the old version of the paper. The danger of losing good versions often leads to the problematic workflow illustrated in the PhD Comics cartoon at the top of this page.\nCollaborative writing with traditional word processors is cumbersome. Either every collaborator has to work on a document sequentially (slowing down the process of writing), or you have to send out a version to all collaborators and manually merge their comments into your document. The ‘track changes’ or ‘record changes’ option can highlight changes for you and simplifies merging, but as soon as you accept changes you will lose their history. You will then no longer know who suggested that change, why it was suggested, or when it was merged into the rest of the document. Even online word processors like Google Docs or Microsoft Office Online do not fully resolve these problems."
  },
  {
    "objectID": "episodes/03-create.html",
    "href": "episodes/03-create.html",
    "title": "Creating a Repository",
    "section": "",
    "text": "Questions\n\n\n\n\nWhere does Git store information?\nOnce Git is configured, we can start using it.\nWe will help Alfredo with his new project, create a repository with all his recipes.\nFirst, let’s create a new directory in the Desktop folder for our work and then change the current working directory to the newly created one:\nThen we tell Git to make recipes a repository -- a place where Git can store versions of our files:\nIt is important to note that git init will create a repository that can include subdirectories and their files—there is no need to create separate repositories nested within the recipes repository, whether subdirectories are present from the beginning or added later. Also, note that the creation of the recipes directory and its initialization as a repository are completely separate processes.\nIf we use ls to show the directory’s contents, it appears that nothing has changed:\nBut if we add the -a flag to show everything, we can see that Git has created a hidden directory within recipes called .git:\nGit uses this special subdirectory to store all the information about the project, including the tracked files and sub-directories located within the project’s directory. If we ever delete the .git subdirectory, we will lose the project’s history.\nWe can now start using one of the most important git commands, which is particularly helpful to beginners. git status tells us the status of our project, and better, a list of changes in the project and options on what to do with those changes. We can use it as often as we want, whenever we want to understand what is going on.\nIf you are using a different version of git, the exact wording of the output might be slightly different."
  },
  {
    "objectID": "episodes/03-create.html#places-to-create-git-repositories",
    "href": "episodes/03-create.html#places-to-create-git-repositories",
    "title": "Creating a Repository",
    "section": "Places to Create Git Repositories",
    "text": "Places to Create Git Repositories\nAlong with tracking information about recipes (the project we have already created), Alfredo would also like to track information about desserts specifically. Alfredo creates a desserts project inside his recipes project with the following sequence of commands:\ncd ~/Desktop    # return to Desktop directory\ncd recipes      # go into recipes directory, which is already a Git repository\nls -a           # ensure the .git subdirectory is still present in the recipes directory\nmkdir desserts # make a sub-directory recipes/desserts\ncd desserts    # go into desserts subdirectory\ngit init        # make the desserts subdirectory a Git repository\nls -a           # ensure the .git subdirectory is present indicating we have created a new Git repository\nIs the git init command, run inside the desserts subdirectory, required for tracking files stored in the desserts subdirectory?\n\nSolution (Solution). No. Alfredo does not need to make the desserts subdirectory a Git repository because the recipes repository will track all files, sub-directories, and subdirectory files under the recipes directory. Thus, in order to track all information about desserts, Alfredo only needed to add the desserts subdirectory to the recipes directory.\nAdditionally, Git repositories can interfere with each other if they are “nested”: the outer repository will try to version-control the inner repository. Therefore, it’s best to create each new Git repository in a separate directory. To be sure that there is no conflicting repository in the directory, check the output of git status. If it looks like the following, you are good to go to create a new repository as shown above:\ngit status\nfatal: Not a git repository (or any of the parent directories): .git"
  },
  {
    "objectID": "episodes/03-create.html#correcting-git-init-mistakes",
    "href": "episodes/03-create.html#correcting-git-init-mistakes",
    "title": "Creating a Repository",
    "section": "Correcting git init Mistakes",
    "text": "Correcting git init Mistakes\nJimmy explains to Alfredo how a nested repository is redundant and may cause confusion down the road. Alfredo would like to go back to a single git repository. How can Alfredo undo his last git init in the desserts subdirectory?\n\nSolution (Solution – USE WITH CAUTION!). \n\nBackground\nRemoving files from a Git repository needs to be done with caution. But we have not learned yet how to tell Git to track a particular file; we will learn this in the next episode. Files that are not tracked by Git can easily be removed like any other “ordinary” files with\nrm filename\nSimilarly a directory can be removed using rm -r dirname. If the files or folder being removed in this fashion are tracked by Git, then their removal becomes another change that we will need to track, as we will see in the next episode.\n\n\nSolution\nGit keeps all of its files in the .git directory. To recover from this little mistake, Alfredo can remove the .git folder in the desserts subdirectory by running the following command from inside the recipes directory:\nrm -rf desserts/.git\nBut be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. In general, deleting files and directories using rm from the command line cannot be reversed. Therefore, always check your current directory using the command pwd."
  },
  {
    "objectID": "episodes/05-history.html",
    "href": "episodes/05-history.html",
    "title": "Exploring History",
    "section": "",
    "text": "Questions\n\n\n\n\nHow can I identify old versions of files?\nHow do I review my changes?\nHow can I recover old versions of files?\nAs we saw in the previous episode, we can refer to commits by their identifiers. You can refer to the most recent commit of the working directory by using the identifier HEAD.\nWe’ve been adding small changes at a time to guacamole.md, so it’s easy to track our progress by looking, so let’s do that using our HEADs. Before we start, let’s make a change to guacamole.md, adding yet another line.\nNow, let’s see what we get.\nNote that HEAD is the default option for git diff, so omitting it will not change the command’s output at all (give it a try). However, the real power of git diff lies in its ability to compare with previous commits. For example, by adding ~1 (where “~” is “tilde”, pronounced [til-duh]), we can look at the commit before HEAD.\nIf we want to see the differences between older commits we can use git diff again, but with the notation HEAD~1, HEAD~2, and so on, to refer to them:\nWe could also use git show which shows us what changes we made at an older commit as well as the commit message, rather than the differences between a commit and our working directory that we see by using git diff.\nIn this way, we can build up a chain of commits. The most recent end of the chain is referred to as HEAD; we can refer to previous commits using the ~ notation, so HEAD~1 means “the previous commit”, while HEAD~123 goes back 123 commits from where we are now.\nWe can also refer to commits using those long strings of digits and letters that both git log and git show display. These are unique IDs for the changes, and “unique” really does mean unique: every change to any set of files on any computer has a unique 40-character identifier. Our first commit was given the ID f22b25e3233b4645dabd0d81e651fe074bd8e73b, so let’s try this:\nThat’s the right answer, but typing out random 40-character strings is annoying, so Git lets us use just the first few characters (typically seven for normal size projects):\nAll right! So we can save changes to files and see what we’ve changed. Now, how can we restore older versions of things? Let’s suppose we change our mind about the last update to guacamole.md (the “ill-considered change”).\ngit status now tells us that the file has been changed, but those changes haven’t been staged:\nWe can put things back the way they were by using git restore:\nAs you might guess from its name, git restore restores an old version of a file. By default, it recovers the version of the file recorded in HEAD, which is the last saved commit. If we want to go back even further, we can use a commit identifier instead, using -s option:\nNotice that the changes are not currently in the staging area, and have not been committed. If we wished, we can put things back the way they were at the last commit by using git restore to overwrite the working copy with the last committed version:\nIt’s important to remember that we must use the commit number that identifies the state of the repository before the change we’re trying to undo. A common mistake is to use the number of the commit in which we made the change we’re trying to discard. In the example below, we want to retrieve the state from before the most recent commit (HEAD~1), which is commit f22b25e. We use the . to mean all files:\nSo, to put it all together, here’s how Git works in cartoon form:\nThe fact that files can be reverted one by one tends to change the way people organize their work. If everything is in one large document, it’s hard (but not impossible) to undo changes to the introduction without also undoing changes made later to the conclusion. If the introduction and conclusion are stored in separate files, on the other hand, moving backward and forward in time becomes much easier."
  },
  {
    "objectID": "episodes/05-history.html#recovering-older-versions-of-a-file",
    "href": "episodes/05-history.html#recovering-older-versions-of-a-file",
    "title": "Exploring History",
    "section": "Recovering Older Versions of a File",
    "text": "Recovering Older Versions of a File\nJennifer has made changes to the Python script that she has been working on for weeks, and the modifications she made this morning “broke” the script and it no longer runs. She has spent ~ 1hr trying to fix it, with no luck…\nLuckily, she has been keeping track of her project’s versions using Git! Which commands below will let her recover the last committed version of her Python script called data_cruncher.py?\n\ngit restore\ngit restore data_cruncher.py\ngit restore -s HEAD~1 data_cruncher.py\ngit restore -s &lt;unique ID of last commit&gt; data_cruncher.py\nBoth 2 and 4\n\n\nSolution (Solution). The answer is (5)-Both 2 and 4.\nThe restore command restores files from the repository, overwriting the files in your working directory. Answers 2 and 4 both restore the latest version in the repository of the file data_cruncher.py. Answer 2 uses HEAD to indicate the latest, whereas answer 4 uses the unique ID of the last commit, which is what HEAD means.\nAnswer 3 gets the version of data_cruncher.py from the commit before HEAD, which is NOT what we wanted.\nAnswer 1 results in an error. You need to specify a file to restore. If you want to restore all files you should use git restore ."
  },
  {
    "objectID": "episodes/05-history.html#reverting-a-commit",
    "href": "episodes/05-history.html#reverting-a-commit",
    "title": "Exploring History",
    "section": "Reverting a Commit",
    "text": "Reverting a Commit\nJennifer is collaborating with colleagues on her Python script. She realizes her last commit to the project’s repository contained an error, and wants to undo it. Jennifer wants to undo correctly so everyone in the project’s repository gets the correct change. The command git revert [erroneous commit ID] will create a new commit that reverses the erroneous commit.\nThe command git revert is different from git restore -s [commit ID] . because git restore returns the files not yet committed within the local repository to a previous state, whereas git revert reverses changes committed to the local and project repositories.\nBelow are the right steps and explanations for Jennifer to use git revert, what is the missing command?\n\n________ # Look at the git history of the project to find the commit ID\nCopy the ID (the first few characters of the ID, e.g. 0b1d055).\ngit revert [commit ID]\nType in the new commit message.\nSave and close.\n\n\nSolution (Solution). The command git log lists project history with commit IDs.\nThe command git show HEAD shows changes made at the latest commit, and lists the commit ID; however, Jennifer should double-check it is the correct commit, and no one else has committed changes to the repository."
  },
  {
    "objectID": "episodes/05-history.html#understanding-workflow-and-history",
    "href": "episodes/05-history.html#understanding-workflow-and-history",
    "title": "Exploring History",
    "section": "Understanding Workflow and History",
    "text": "Understanding Workflow and History\nWhat is the output of the last command in\ncd recipes\necho \"I like tomatoes, therefore I like ketchup\" &gt; ketchup.md\ngit add ketchup.md\necho \"ketchup enhances pasta dishes\" &gt;&gt; ketchup.md\ngit commit -m \"My opinions about the red sauce\"\ngit restore ketchup.md\ncat ketchup.md # this will print the content of ketchup.md on screen\n\n   ketchup enhances pasta dishes\n   I like tomatoes, therefore I like ketchup\n   I like tomatoes, therefore I like ketchup\n   ketchup enhances pasta dishes\n   Error because you have changed ketchup.md without committing the changes\n\n\nSolution (Solution). The answer is 2.\nThe changes to the file from the second echo command are only applied to the working copy, not the version in the staging area. The command git add ketchup.md places the current version of ketchup.md into the staging area.\nSo, when git commit -m \"My opinions about the red sauce\" is executed, the version of ketchup.md committed to the repository is the one from the staging area and has only one line.\nAt this time, the working copy still has the second line (and git status will show that the file is modified). However, git restore ketchup.md replaces the working copy with the most recently committed version of ketchup.md. So, cat ketchup.md will output\nI like tomatoes, therefore I like ketchup"
  },
  {
    "objectID": "episodes/05-history.html#checking-understanding-of-git-diff",
    "href": "episodes/05-history.html#checking-understanding-of-git-diff",
    "title": "Exploring History",
    "section": "Checking Understanding of git diff",
    "text": "Checking Understanding of git diff\nConsider this command: git diff HEAD~9 guacamole.md. What do you predict this command will do if you execute it? What happens when you do execute it? Why?\nTry another command, git diff [ID] guacamole.md, where [ID] is replaced with the unique identifier for your most recent commit. What do you think will happen, and what does happen?"
  },
  {
    "objectID": "episodes/05-history.html#getting-rid-of-staged-changes",
    "href": "episodes/05-history.html#getting-rid-of-staged-changes",
    "title": "Exploring History",
    "section": "Getting Rid of Staged Changes",
    "text": "Getting Rid of Staged Changes\ngit restore can be used to restore a previous commit when unstaged changes have been made, but will it also work for changes that have been staged but not committed? Make a change to guacamole.md, add that change using git add, then use git restore to see if you can remove your change.\n\nSolution (Solution). After adding a change, git restore can not be used directly. Let’s look at the output of git status:\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   guacamole.md\n\nNote that if you don’t have the same output you may either have forgotten to change the file, or you have added it and committed it.\nUsing the command git restore guacamole.md now does not give an error, but it does not restore the file either. Git helpfully tells us that we need to use git restore --staged first to unstage the file:\ngit restore --staged guacamole.md\nNow, git status gives us:\ngit status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   guacamole.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nThis means we can now use git restore to restore the file to the previous commit:\ngit restore guacamole.md\ngit status\nOn branch main\nnothing to commit, working tree clean"
  },
  {
    "objectID": "episodes/05-history.html#explore-and-summarize-histories",
    "href": "episodes/05-history.html#explore-and-summarize-histories",
    "title": "Exploring History",
    "section": "Explore and Summarize Histories",
    "text": "Explore and Summarize Histories\nExploring history is an important part of Git, and often it is a challenge to find the right commit ID, especially if the commit is from several months ago.\nImagine the recipes project has more than 50 files. You would like to find a commit that modifies some specific text in guacamole.md. When you type git log, a very long list appeared. How can you narrow down the search?\nRecall that the git diff command allows us to explore one specific file, e.g., git diff guacamole.md. We can apply a similar idea here.\ngit log guacamole.md\nUnfortunately some of these commit messages are very ambiguous, e.g., update files. How can you search through these files?\nBoth git diff and git log are very useful and they summarize a different part of the history for you. Is it possible to combine both? Let’s try the following:\ngit log --patch guacamole.md\nYou should get a long list of output, and you should be able to see both commit messages and the difference between each commit.\nQuestion: What does the following command do?\ngit log --patch HEAD~9 *.md"
  },
  {
    "objectID": "episodes/07-github.html",
    "href": "episodes/07-github.html",
    "title": "Remotes in GitHub",
    "section": "",
    "text": "Questions\n\n\n\n\nHow do I share my changes with others on the web?\nVersion control really comes into its own when we begin to collaborate with other people. We already have most of the machinery we need to do this; the only thing missing is to copy changes from one repository to another.\nSystems like Git allow us to move work between any two repositories. In practice, though, it’s easiest to use one copy as a central hub, and to keep it on the web rather than on someone’s laptop. Most programmers use hosting services like GitHub, Bitbucket or GitLab to hold those main copies; we’ll explore the pros and cons of this in a later episode.\nLet’s start by sharing the changes we’ve made to our current project with the world. To this end we are going to create a remote repository that will be linked to our local repository."
  },
  {
    "objectID": "episodes/07-github.html#create-a-remote-repository",
    "href": "episodes/07-github.html#create-a-remote-repository",
    "title": "Remotes in GitHub",
    "section": "1. Create a remote repository",
    "text": "1. Create a remote repository\nLog in to GitHub, then click on the icon in the top right corner to create a new repository called recipes:\n\nName your repository “recipes” and then click “Create Repository”.\nNote: Since this repository will be connected to a local repository, it needs to be empty. Leave “Initialize this repository with a README” unchecked, and keep “None” as options for both “Add .gitignore” and “Add a license.” See the “GitHub License and README files” exercise below for a full explanation of why the repository needs to be empty.\n\nAs soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository:\n\nThis effectively does the following on GitHub’s servers:\nmkdir recipes\ncd recipes\ngit init\nIf you remember back to the earlier episode where we added and committed our earlier work on guacamole.md, we had a diagram of the local repository which looked like this:\n\nNow that we have two repositories, we need a diagram like this:\n\nNote that our local repository still contains our earlier work on guacamole.md, but the remote repository on GitHub appears empty as it doesn’t contain any files yet."
  },
  {
    "objectID": "episodes/07-github.html#connect-local-to-remote-repository",
    "href": "episodes/07-github.html#connect-local-to-remote-repository",
    "title": "Remotes in GitHub",
    "section": "2. Connect local to remote repository",
    "text": "2. Connect local to remote repository\nNow we connect the two repositories. We do this by making the GitHub repository a remote for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it:\n\nClick on the ‘SSH’ link to change the protocol from HTTPS to SSH.\n\n\n\n\n\n\nHTTPS vs. SSH\n\n\n\nWe use SSH here because, while it requires some additional configuration, it is a security protocol widely used by many applications. The steps below describe SSH at a minimum level for GitHub.\n\n\n\nCopy that URL from the browser, go into the local recipes repository, and run this command:\ngit remote add origin git@github.com:alflin/recipes.git\nMake sure to use the URL for your repository rather than Alfredo’s: the only difference should be your username instead of alflin.\norigin is a local name used to refer to the remote repository. It could be called anything, but origin is a convention that is often used by default in git and GitHub, so it’s helpful to stick with this unless there’s a reason not to.\nWe can check that the command has worked by running git remote -v:\ngit remote -v\norigin   git@github.com:alflin/recipes.git (fetch)\norigin   git@github.com:alflin/recipes.git (push)\nWe’ll discuss remotes in more detail in the next episode, while talking about how they might be used for collaboration."
  },
  {
    "objectID": "episodes/07-github.html#ssh-background-and-setup",
    "href": "episodes/07-github.html#ssh-background-and-setup",
    "title": "Remotes in GitHub",
    "section": "3. SSH Background and Setup",
    "text": "3. SSH Background and Setup\nBefore Alfredo can connect to a remote repository, he needs to set up a way for his computer to authenticate with GitHub so it knows it’s him trying to connect to his remote repository.\nWe are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\nSSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\nYou can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\nWhat we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account.\nThe first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it.\n\n\n\n\n\n\nKeeping your keys secure\n\n\n\nYou shouldn’t really forget about your SSH keys, since they keep your account secure. It’s good practice to check your SSH keys every so often to ensure they are still secure, up to date, and that there are no unauthorized keys that could compromise your account. This is especially important if you are using multiple computers to access your account.\n\n\nWe will run the list command to check what key pairs already exist on your computer.\nls -al ~/.ssh\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\nAlfredo has not set up SSH on his computer, so his output is\nls: cannot access '/c/Users/Alfredo/.ssh': No such file or directory\nIf SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up. Since they don’t exist on Alfredo’s computer, he uses this command to create them.\n\n3.1 Create an SSH key pair\nTo create an SSH key pair Alfredo uses this command, where the -t option specifies which type of algorithm to use and -C attaches a comment to the key (here, Alfredo’s email):\nssh-keygen -t ed25519 -C \"a.linguini@ratatouille.fr\"\nIf you are using a legacy system that doesn’t support the Ed25519 algorithm, use: ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/c/Users/Alfredo/.ssh/id_ed25519):\nWe want to use the default file, so just press Enter.\nCreated directory '/c/Users/Alfredo/.ssh'.\nEnter passphrase (empty for no passphrase):\nNow, it is prompting Alfredo for a passphrase. Since he is using his kitchen’s laptop that other people sometimes have access to, he wants to create a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no “reset my password” option. Note that, when typing a passphrase on a terminal, there won’t be any visual feedback of your typing. This is normal: your passphrase will be recorded even if you see nothing changing on your screen.\nEnter same passphrase again:\nAfter entering the same passphrase a second time, we receive the confirmation\nYour identification has been saved in /c/Users/Alfredo/.ssh/id_ed25519\nYour public key has been saved in /c/Users/Alfredo/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o a.linguini@ratatouille.fr\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\nThe “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\nNow that we have generated the SSH keys, we will find the SSH files when we check.\nls -al ~/.ssh\ndrwxr-xr-x 1 Alfredo   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 Alfredo   197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 Alfredo   197121 419 Jul 16 14:48 id_ed25519\n-rw-r--r-- 1 Alfredo   197121 106 Jul 16 14:48 id_ed25519.pub\n\n\n3.2 Copy the public key to GitHub\nNow we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\nssh -T git@github.com\nThe authenticity of host 'github.com (192.30.255.112)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? y\nPlease type 'yes', 'no' or the fingerprint: yes\nWarning: Permanently added 'github.com' (RSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nRight, we forgot that we need to give GitHub our public key!\nFirst, we need to copy the public key. Be sure to include the .pub at the end, otherwise you’re looking at the private key.\ncat ~/.ssh/id_ed25519.pub\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI a.linguini@ratatouille.fr\nNow, going to GitHub.com, click on your profile icon in the top right corner to get the drop-down menu. Click “Settings”, then on the settings page, click “SSH and GPG keys”, on the left side “Access” menu. Click the “New SSH key” button on the right side. Now, you can add the title (Alfredo uses the title “Alfredo’s Kitchen Laptop” so he can remember where the original key pair files are located), paste your SSH key into the field, and click the “Add SSH key” to complete the setup.\nNow that we’ve set that up, let’s check our authentication again from the command line.\nssh -T git@github.com\nHi Alfredo! You've successfully authenticated, but GitHub does not provide shell access.\nGood! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository."
  },
  {
    "objectID": "episodes/07-github.html#push-local-changes-to-a-remote",
    "href": "episodes/07-github.html#push-local-changes-to-a-remote",
    "title": "Remotes in GitHub",
    "section": "4. Push local changes to a remote",
    "text": "4. Push local changes to a remote\nNow that authentication is setup, we can return to the remote. This command will push the changes from our local repository to the repository on GitHub:\ngit push origin main\nSince Alfredo set up a passphrase, it will prompt him for it. If you completed advanced settings for your authentication, it will not prompt for a passphrase.\nEnumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\nTotal 16 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo https://github.com/alflin/recipes.git\n * [new branch]      main -&gt; main\n\n\n\n\n\n\nProxy\n\n\n\nIf the network you are connected to uses a proxy, there is a chance that your last command failed with “Could not resolve hostname” as the error message. To solve this issue, you need to tell Git about the proxy:\ngit config --global http.proxy http://user:password@proxy.url\ngit config --global https.proxy https://user:password@proxy.url\nWhen you connect to another network that doesn’t use a proxy, you will need to tell Git to disable the proxy using:\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n\n\n\n\n\n\n\nPassword Managers\n\n\n\nIf your operating system has a password manager configured, git push will try to use it when it needs your username and password. For example, this is the default behavior for Git Bash on Windows. If you want to type your username and password at the terminal instead of using a password manager, type:\nunset SSH_ASKPASS\nin the terminal, before you run git push. Despite the name, Git uses SSH_ASKPASS for all credential entry, so you may want to unset SSH_ASKPASS whether you are using Git via SSH or https.\nYou may also want to add unset SSH_ASKPASS at the end of your ~/.bashrc to make Git default to using the terminal for usernames and passwords.\n\n\nOur local and remote repositories are now in this state:\n\n\n\n\n\n\n\nThe ‘-u’ Flag\n\n\n\nYou may see a -u option used with git push in some documentation. This option is synonymous with the --set-upstream-to option for the git branch command, and is used to associate the current branch with a remote branch so that the git pull command can be used without any arguments. To do this, simply use git push -u origin main once the remote has been set up.\n\n\nWe can pull changes from the remote repository to the local one as well:\ngit pull origin main\nFrom https://github.com/alflin/recipes\n * branch            main     -&gt; FETCH_HEAD\nAlready up-to-date.\nPulling has no effect in this case because the two repositories are already synchronized. If someone else had pushed some changes to the repository on GitHub, though, this command would download them to our local repository."
  },
  {
    "objectID": "episodes/07-github.html#github-gui",
    "href": "episodes/07-github.html#github-gui",
    "title": "Remotes in GitHub",
    "section": "GitHub GUI",
    "text": "GitHub GUI\nBrowse to your recipes repository on GitHub. Under the Code tab, find and click on the text that says “XX commits” (where “XX” is some number). Hover over, and click on, the three buttons to the right of each commit. What information can you gather/explore from these buttons? How would you get that same information in the shell?\n\nSolution (Solution). The left-most button (with the picture of a clipboard) copies the full identifier of the commit to the clipboard. In the shell, git log will show you the full commit identifier for each commit.\nWhen you click on the middle button, you’ll see all of the changes that were made in that particular commit. Green shaded lines indicate additions and red ones removals. In the shell we can do the same thing with git diff. In particular, git diff ID1..ID2 where ID1 and ID2 are commit identifiers (e.g. git diff a3bf1e5..041e637) will show the differences between those two commits.\nThe right-most button lets you view all of the files in the repository at the time of that commit. To do this in the shell, we’d need to checkout the repository at that particular time. We can do this with git checkout ID where ID is the identifier of the commit we want to look at. If we do this, we need to remember to put the repository back to the right state afterwards!"
  },
  {
    "objectID": "episodes/07-github.html#github-timestamp",
    "href": "episodes/07-github.html#github-timestamp",
    "title": "Remotes in GitHub",
    "section": "GitHub Timestamp",
    "text": "GitHub Timestamp\nCreate a remote repository on GitHub. Push the contents of your local repository to the remote. Make changes to your local repository and push these changes. Go to the repo you just created on GitHub and check the timestamps of the files. How does GitHub record times, and why?\n\nSolution (Solution). GitHub displays timestamps in a human readable relative format (i.e. “22 hours ago” or “three weeks ago”). However, if you hover over the timestamp, you can see the exact time at which the last change to the file occurred."
  },
  {
    "objectID": "episodes/07-github.html#push-vs.-commit",
    "href": "episodes/07-github.html#push-vs.-commit",
    "title": "Remotes in GitHub",
    "section": "Push vs. Commit",
    "text": "Push vs. Commit\nIn this episode, we introduced the “git push” command. How is “git push” different from “git commit”?\n\nSolution (Solution). When we push changes, we’re interacting with a remote repository to update it with the changes we’ve made locally (often this corresponds to sharing the changes we’ve made with others). Commit only updates your local repository."
  },
  {
    "objectID": "episodes/07-github.html#github-license-and-readme-files",
    "href": "episodes/07-github.html#github-license-and-readme-files",
    "title": "Remotes in GitHub",
    "section": "GitHub License and README files",
    "text": "GitHub License and README files\nIn this episode we learned about creating a remote repository on GitHub, but when you initialized your GitHub repo, you didn’t add a README.md or a license file. If you had, what do you think would have happened when you tried to link your local and remote repositories?\n\nSolution (Solution). In this case, we’d see a merge conflict due to unrelated histories. When GitHub creates a README.md file, it performs a commit in the remote repository. When you try to pull the remote repository to your local repository, Git detects that they have histories that do not share a common origin and refuses to merge.\ngit pull origin main\nwarning: no common commits\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/alflin/recipes\n * branch            main     -&gt; FETCH_HEAD\n * [new branch]      main     -&gt; origin/main\nfatal: refusing to merge unrelated histories\nYou can force git to merge the two repositories with the option --allow-unrelated-histories. Be careful when you use this option and carefully examine the contents of local and remote repositories before merging.\ngit pull --allow-unrelated-histories origin main\nFrom https://github.com/alflin/recipes\n * branch            main     -&gt; FETCH_HEAD\nMerge made by the 'recursive' strategy.\nREADME.md | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 README.md"
  },
  {
    "objectID": "episodes/09-conflict.html",
    "href": "episodes/09-conflict.html",
    "title": "Conflicts",
    "section": "",
    "text": "Questions\n\n\n\n\nWhat do I do when my changes conflict with someone else’s?\nAs soon as people can work in parallel, they’ll likely step on each other’s toes. This will even happen with a single person: if we are working on a piece of software on both our laptop and a server in the lab, we could make different changes to each copy. Version control helps us manage these conflicts by giving us tools to resolve overlapping changes.\nTo see how we can resolve conflicts, we must first create one. The file guacamole.md currently looks like this in both partners’ copies of our recipes repository:\nLet’s add a line to the collaborator’s copy only:\nand then push the change to GitHub:\nNow let’s have the owner make a different change to their copy without updating from GitHub:\nWe can commit the change locally:\nbut Git won’t let us push it to GitHub:\nGit rejects the push because it detects that the remote repository has new updates that have not been incorporated into the local branch. What we have to do is pull the changes from GitHub, merge them into the copy we’re currently working in, and then push that. Let’s start by pulling:\nThe git pull command updates the local repository to include those changes already included in the remote repository. After the changes from remote branch have been fetched, Git detects that changes made to the local copy overlap with those made to the remote repository, and therefore refuses to merge the two versions to stop us from trampling on our previous work. The conflict is marked in in the affected file:\nOur change is preceded by &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD. Git has then inserted ======= as a separator between the conflicting changes and marked the end of the content downloaded from GitHub with &gt;&gt;&gt;&gt;&gt;&gt;&gt;. (The string of letters and digits after that marker identifies the commit we’ve just downloaded.)\nIt is now up to us to edit this file to remove these markers and reconcile the changes. We can do anything we want: keep the change made in the local repository, keep the change made in the remote repository, write something new to replace both, or get rid of the change entirely. Let’s replace both so that the file looks like this:\nTo finish merging, we add guacamole.md to the changes being made by the merge and then commit:\nNow we can push our changes to GitHub:\nGit keeps track of what we’ve merged with what, so we don’t have to fix things by hand again when the collaborator who made the first change pulls again:\nWe get the merged file:\nWe don’t need to merge again because Git knows someone has already done that.\nGit’s ability to resolve conflicts is very useful, but conflict resolution costs time and effort, and can introduce errors if conflicts are not resolved correctly. If you find yourself resolving a lot of conflicts in a project, consider these technical approaches to reducing them:\nConflicts can also be minimized with project management strategies:"
  },
  {
    "objectID": "episodes/09-conflict.html#solving-conflicts-that-you-create",
    "href": "episodes/09-conflict.html#solving-conflicts-that-you-create",
    "title": "Conflicts",
    "section": "Solving Conflicts that You Create",
    "text": "Solving Conflicts that You Create\nClone the repository created by your instructor. Add a new file to it, and modify an existing file (your instructor will tell you which one). When asked by your instructor, pull her changes from the repository to create a conflict, then resolve it."
  },
  {
    "objectID": "episodes/09-conflict.html#conflicts-on-non-textual-files",
    "href": "episodes/09-conflict.html#conflicts-on-non-textual-files",
    "title": "Conflicts",
    "section": "Conflicts on Non-textual files",
    "text": "Conflicts on Non-textual files\nWhat does Git do when there is a conflict in an image or some other non-textual file that is stored in version control?\n\nSolution (Solution). Let’s try it. Suppose Alfredo takes a picture of its guacamole and calls it guacamole.jpg.\nIf you do not have an image file of guacamole available, you can create a dummy binary file like this:\nhead --bytes 1024 /dev/urandom &gt; guacamole.jpg\nls -lh guacamole.jpg\n-rw-r--r-- 1 alflin 57095 1.0K Mar  8 20:24 guacamole.jpg\nls shows us that this created a 1-kilobyte file. It is full of random bytes read from the special file, /dev/urandom.\nNow, suppose Alfredo adds guacamole.jpg to his repository:\ngit add guacamole.jpg\ngit commit -m \"Add picture of guacamole\"\n[main 8e4115c] Add picture of guacamole\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 guacamole.jpg\nSuppose that Jimmy has added a similar picture in the meantime. Theirs is a picture of a guacamole with nachos, but it is also called guacamole.jpg. When Alfredo tries to push, he gets a familiar message:\ngit push origin main\nTo https://github.com/alflin/recipes.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://github.com/alflin/recipes.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nWe’ve learned that we must pull first and resolve any conflicts:\ngit pull origin main\nWhen there is a conflict on an image or other binary file, git prints a message like this:\ngit pull origin main\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/alflin/recipes.git\n * branch            main     -&gt; FETCH_HEAD\n   6a67967..439dc8c  main     -&gt; origin/main\nwarning: Cannot merge binary files: guacamole.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nAuto-merging guacamole.jpg\nCONFLICT (add/add): Merge conflict in guacamole.jpg\nAutomatic merge failed; fix conflicts and then commit the result.\nThe conflict message here is mostly the same as it was for guacamole.md, but there is one key additional line:\nwarning: Cannot merge binary files: guacamole.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nGit cannot automatically insert conflict markers into an image as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version.\nOn the key line above, Git has conveniently given us commit identifiers for the two versions of guacamole.jpg. Our version is HEAD, and Jimmy’s version is 439dc8c0.... If we want to use our version, we can use git checkout:\ngit checkout HEAD guacamole.jpg\ngit add guacamole.jpg\ngit commit -m \"Use image of just guacamole instead of with nachos\"\n[main 21032c3] Use image of just guacamole instead of with nachos\nIf instead we want to use Jimmy’s version, we can use git checkout with Jimmy’s commit identifier, 439dc8c0:\ngit checkout 439dc8c0 guacamole.jpg\ngit add guacamole.jpg\ngit commit -m \"Use image of guacamole with nachos instead of just guacamole\"\n[main da21b34] Use image of guacamole with nachos instead of just guacamole\nWe can also keep both images. The catch is that we cannot keep them under the same name. But, we can check out each version in succession and rename it, then add the renamed versions. First, check out each image and rename it:\ngit checkout HEAD guacamole.jpg\ngit mv guacamole.jpg guacamole-only.jpg\ngit checkout 439dc8c0 guacamole.jpg\nmv guacamole.jpg guacamole-nachos.jpg\nThen, remove the old guacamole.jpg and add the two new files:\ngit rm guacamole.jpg\ngit add guacamole-only.jpg\ngit add guacamole-nachos.jpg\ngit commit -m \"Use two images: just guacamole and with nachos\"\n[main 94ae08c] Use two images: just guacamole and with nachos\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 guacamole-nachos.jpg\n rename guacamole.jpg =&gt; guacamole-only.jpg (100%)\nNow both images of guacamole are checked into the repository, and guacamole.jpg no longer exists."
  },
  {
    "objectID": "episodes/09-conflict.html#a-typical-work-session",
    "href": "episodes/09-conflict.html#a-typical-work-session",
    "title": "Conflicts",
    "section": "A Typical Work Session",
    "text": "A Typical Work Session\nYou sit down at your computer to work on a shared project that is tracked in a remote Git repository. During your work session, you take the following actions, but not in this order:\n\nMake changes by appending the number 100 to a text file numbers.txt\nUpdate remote repository to match the local repository\nCelebrate your success with some fancy beverage(s)\nUpdate local repository to match the remote repository\nStage changes to be committed\nCommit changes to the local repository\n\nIn what order should you perform these actions to minimize the chances of conflicts? Put the commands above in order in the action column of the table below. When you have the order right, see if you can write the corresponding commands in the command column. A few steps are populated to get you started.\n\n\n\n\n\n\n\n\norder\naction . . . . . . . . . .\ncommand . . . . . . . . . .\n\n\n\n\n1\n\n\n\n\n2\n\necho 100 &gt;&gt; numbers.txt\n\n\n3\n\n\n\n\n4\n\n\n\n\n5\n\n\n\n\n6\nCelebrate!\n\n\n\n\n\nSolution (Solution). \n\n\n\n\n\n\n\n\norder\naction . . . . . .\ncommand . . . . . . . . . . . . . . . . . . .\n\n\n\n\n1\nUpdate local\ngit pull origin main\n\n\n2\nMake changes\necho 100 &gt;&gt; numbers.txt\n\n\n3\nStage changes\ngit add numbers.txt\n\n\n4\nCommit changes\ngit commit -m \"Add 100 to numbers.txt\"\n\n\n5\nUpdate remote\ngit push origin main\n\n\n6\nCelebrate!"
  },
  {
    "objectID": "episodes/11-licensing.html",
    "href": "episodes/11-licensing.html",
    "title": "Licensing",
    "section": "",
    "text": "Questions\n\n\n\n\nWhat licensing information should I include with my work?\nAs an open source project, Software Carpentry relies on volunteers to create our lessons and includes a file named LICENSE or LICENSE.txt file in all public lesson repositories. This file is used to specify that all materials are freely available under the Creative Commons Attribution license. Without a file that clearly states under which license any public source code, manuscript or other creative works is being made available, the default copyright laws apply. To learn more about licensing and open source, you can read more about Github’s description of licenses and the legal grounds for open source licensing.\nA license solves this problem by granting rights to others (the licensees) that they would otherwise not have. What rights are being granted under which conditions differs, often only slightly, from one license to another. In practice, a few licenses are by far the most popular, and choosealicense.com will help you find a common license that suits your needs. Important considerations include:\nChoosing a license that is in common use makes life easier for contributors and users, because they are more likely to already be familiar with the license and don’t have to wade through a bunch of jargon to decide if they’re ok with it. The Open Source Initiative and Free Software Foundation both maintain lists of licenses which are good choices.\nThis article provides an excellent overview of licensing and licensing options from the perspective of scientists who also write code.\nAt the end of the day what matters is that there is a clear statement as to what the license is. Also, the license is best chosen from the get-go, even if for a repository that is not public. Pushing off the decision only makes it more complicated later, because each time a new collaborator starts contributing, they, too, hold copyright and will thus need to be asked for approval once a license is chosen."
  },
  {
    "objectID": "episodes/11-licensing.html#can-i-use-open-license",
    "href": "episodes/11-licensing.html#can-i-use-open-license",
    "title": "Licensing",
    "section": "Can I Use Open License?",
    "text": "Can I Use Open License?\nFind out whether you are allowed to apply an open license to your software. Can you do this unilaterally, or do you need permission from someone in your institution? If so, who?"
  },
  {
    "objectID": "episodes/11-licensing.html#what-licenses-have-i-already-accepted",
    "href": "episodes/11-licensing.html#what-licenses-have-i-already-accepted",
    "title": "Licensing",
    "section": "What licenses have I already accepted?",
    "text": "What licenses have I already accepted?\nMany of the software tools we use on a daily basis (including in this workshop) are released as open-source software. Pick a project on GitHub from the list below, or one of your own choosing. Find its license (usually in a file called LICENSE or COPYING) and talk about how it restricts your use of the software. Is it one of the licenses discussed in this session? How is it different?\n\nGit, the source-code management tool\nCPython, the standard implementation of the Python language\nJupyter, the project behind the web-based Python notebooks we’ll be using\nEtherPad, a real-time collaborative editor"
  },
  {
    "objectID": "episodes/13-hosting.html",
    "href": "episodes/13-hosting.html",
    "title": "Hosting",
    "section": "",
    "text": "Questions\n\n\n\n\nWhere should I host my version control repositories?\nAfter choosing a license, another big question for groups that want to open up their work is where to host their code and data. One option is for the lab, the department, or the university to provide a server, manage accounts and backups, and so on. The main benefit of this is that it clarifies who owns what, which is particularly important if any of the material is sensitive (i.e., relates to experiments involving human subjects or may be used in a patent application). The main drawbacks are the cost of providing the service and its longevity: a scientist who has spent ten years collecting data would like to be sure that data will still be available ten years from now, but that’s well beyond the lifespan of most of the grants that fund academic infrastructure.\nAnother option is to purchase a domain and pay an Internet service provider (ISP) to host it. This gives the individual or group more control, and sidesteps problems that can arise when moving from one institution to another, but requires more time and effort to set up than either the option above or the option below.\nThe third option is to use a public hosting service like GitHub, GitLab, or BitBucket. Each of these services provides a web interface that enables people to create, view, and edit their code repositories. These services also provide communication and project management tools including issue tracking, wiki pages, email notifications, and code reviews. These services benefit from economies of scale and network effects: it’s easier to run one large service well than to run many smaller services to the same standard. It’s also easier for people to collaborate. Using a popular service can help connect your project with communities already using the same service.\nAs an example, Software Carpentry is on GitHub where you can find the source for this page. Anyone with a GitHub account can suggest changes to this text.\nGitHub repositories can also be assigned DOIs, by connecting its releases to Zenodo. For example, 10.5281/zenodo.7908089 is the DOI that has been “minted” for this introduction to Git.\nUsing large, well-established services can also help you quickly take advantage of powerful tools. One such tool, continuous integration (CI), can automatically run software builds and tests whenever code is committed or pull requests are submitted. Direct integration of CI with an online hosting service means this information is present in any pull request, and helps maintain code integrity and quality standards. While CI is still available in self-hosted situations, there is much less setup and maintenance involved with using an online service. Furthermore, such tools are often provided free of charge to open source projects, and are also available for private repositories for a fee."
  },
  {
    "objectID": "episodes/13-hosting.html#can-my-work-be-public",
    "href": "episodes/13-hosting.html#can-my-work-be-public",
    "title": "Hosting",
    "section": "Can My Work Be Public?",
    "text": "Can My Work Be Public?\nFind out whether you are allowed to host your work openly in a public repository. Can you do this unilaterally, or do you need permission from someone in your institution? If so, who?"
  },
  {
    "objectID": "episodes/13-hosting.html#where-can-i-share-my-work",
    "href": "episodes/13-hosting.html#where-can-i-share-my-work",
    "title": "Hosting",
    "section": "Where Can I Share My Work?",
    "text": "Where Can I Share My Work?\nDoes your institution have a repository or repositories that you can use to share your papers, data and software? How do institutional repositories differ from services like arXiV, figshare, GitHub or GitLab?"
  },
  {
    "objectID": "scripts/00_precourse.html",
    "href": "scripts/00_precourse.html",
    "title": "",
    "section": "",
    "text": "Install or activate WSL or Unix, and install R and RStudio if you do not have them already before 1st meeting.\nWe strongly recommend for those not yet familiar with UNIX and/or R to take this opportunity and take these online tutorials, since those are requirements for the workshop. This will help you to develop your programming skills and we can always learn a few tricks here and there, even if you are already experienced.\n\n\n\n\n\n\n\n\nTask & Tools\nNote\nLink\n\n\n\n\nBook Reading (pdf)\nchapter 1-9\nA (very) short introduction to R.pdf\n\n\nInstall & activate WSL or Unix\nFor Windows user only\nUNIX\n\n\nInstall R itself and RStudio Desktop\nall participants\nR & RStudio\n\n\n\nhttps://swcarpentry.github.io/git-novice/04-changes.html"
  },
  {
    "objectID": "scripts/00_precourse.html#precourse-materials",
    "href": "scripts/00_precourse.html#precourse-materials",
    "title": "",
    "section": "",
    "text": "Install or activate WSL or Unix, and install R and RStudio if you do not have them already before 1st meeting.\nWe strongly recommend for those not yet familiar with UNIX and/or R to take this opportunity and take these online tutorials, since those are requirements for the workshop. This will help you to develop your programming skills and we can always learn a few tricks here and there, even if you are already experienced.\n\n\n\n\n\n\n\n\nTask & Tools\nNote\nLink\n\n\n\n\nBook Reading (pdf)\nchapter 1-9\nA (very) short introduction to R.pdf\n\n\nInstall & activate WSL or Unix\nFor Windows user only\nUNIX\n\n\nInstall R itself and RStudio Desktop\nall participants\nR & RStudio\n\n\n\nhttps://swcarpentry.github.io/git-novice/04-changes.html"
  },
  {
    "objectID": "scripts/02_intro_to_github.html",
    "href": "scripts/02_intro_to_github.html",
    "title": "",
    "section": "",
    "text": "About R, R vs Rstudio, Timeline\nSetting a project or working directory\nInteracting with R\nPackages\nAssign values or objects\nData types, structures\nHow to import and export data or results\nHandle large data sets\nHousekeeping\nOutliers\n\n\n\n\n\nset working directory,\nprint path of the current working directory,\nupload data,\nsubset data,\ntidy data\ntransform data,\nplot,\nsaving plot\n\n\n\n\nsetwd, getwd, read_table, read_csv, pvot_longer, pvot_wider, select, mutate, summarize, summary.\n\n\n\nInstall Tidyverse package\ninstall.packages(\"tidyverse\")\n\nlibrary(\"tidyverse\")\n\n\n\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "scripts/02_intro_to_github.html#intro-to-r-under-development",
    "href": "scripts/02_intro_to_github.html#intro-to-r-under-development",
    "title": "",
    "section": "",
    "text": "About R, R vs Rstudio, Timeline\nSetting a project or working directory\nInteracting with R\nPackages\nAssign values or objects\nData types, structures\nHow to import and export data or results\nHandle large data sets\nHousekeeping\nOutliers\n\n\n\n\n\nset working directory,\nprint path of the current working directory,\nupload data,\nsubset data,\ntidy data\ntransform data,\nplot,\nsaving plot\n\n\n\n\nsetwd, getwd, read_table, read_csv, pvot_longer, pvot_wider, select, mutate, summarize, summary.\n\n\n\nInstall Tidyverse package\ninstall.packages(\"tidyverse\")\n\nlibrary(\"tidyverse\")\n\n\n\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "scripts/04_website.html",
    "href": "scripts/04_website.html",
    "title": "Practical 01 — Intro to Linux",
    "section": "",
    "text": "Learn basic shell commands\nPractice editing files\n\n# example: list files\nls -la"
  },
  {
    "objectID": "scripts/04_website.html#goals",
    "href": "scripts/04_website.html#goals",
    "title": "Practical 01 — Intro to Linux",
    "section": "",
    "text": "Learn basic shell commands\nPractice editing files\n\n# example: list files\nls -la"
  },
  {
    "objectID": "episodes/04-changes.html#questions",
    "href": "episodes/04-changes.html#questions",
    "title": "Tracking Changes",
    "section": "",
    "text": "Questions\n\n\n\n\nHow do I record changes in Git?\nHow do I check the status of my version control repository?\nHow do I record notes about what changes I made and why?"
  },
  {
    "objectID": "episodes/04-changes.html#objectives",
    "href": "episodes/04-changes.html#objectives",
    "title": "Tracking Changes",
    "section": "Objectives",
    "text": "Objectives\n\n\n\n\n\n\nObjectives\n\n\n\n\nGo through the modify-add-commit cycle for one or more files.\nExplain where information is stored at each stage of that cycle.\nDistinguish between descriptive and non-descriptive commit messages.\n\n\n\nFirst let’s make sure we’re still in the right directory. You should be in the recipes directory.\n$ cd ~/Desktop/recipes\nLet’s create a file called guacamole.md that contains the basic structure of our first recipe. We’ll use nano to edit the file; you can use whatever editor you like. In particular, this does not have to be the core.editor you set globally earlier. But remember, the steps to create or edit a new file will depend on the editor you choose (it might not be nano). For a refresher on text editors, check out “Which Editor?” in The Unix Shell lesson.\n$ nano guacamole.md\nType the text below into the guacamole.md file:\n# Guacamole\n## Ingredients\n## Instructions\nSave the file and exit your editor."
  }
]